#version 330 core

struct SunLight {
    vec3 position;
    vec3 color;
    float strength;
};

in vec2 fragmentTexCoord;
in vec3 fragmentPosition;
in vec3 fragmentNormal;
in vec3 fragmentColor; // Added color input

uniform sampler2D imageTexture;
uniform SunLight Light;
uniform vec3 cameraPosition;

uniform vec3 materialDiffuse;
uniform vec3 materialSpecular;
uniform vec3 materialAmbient;

out vec4 color;

vec3 calculateLight(SunLight Light, vec3 fragPosition, vec3 fragNormal);

void main()
{
    vec3 temp = 0.5 * texture(imageTexture, fragmentTexCoord).rgb;

    temp += calculateLight(Light, fragmentPosition, fragmentNormal);

    color = vec4(temp, fragmentColor);
}

vec3 calculateLight(SunLight light, vec3 fragPosition, vec3 fragNormal ) {

    vec3 baseTexture = texture(imageTexture, fragmentTexCoord).rgb;
    vec3 result = vec3(0);

    //geometric data
    vec3 fragLight = light.position - fragPosition;
    float distance = length(fragLight);
    fragLight = normalize(fragLight);
    vec3 fragCamera = normalize(cameraPosition - fragPosition);
    vec3 halfVec = normalize(fragLight + fragCamera);

    // check if texture present or not.
    if (baseTexture.r != 0.0 || baseTexture.g != 0.0 || baseTexture.b != 0.0) {

        // Use the texture color as the base colour
        result += 0.75 * baseTexture;
        //result += mix(baseTexture, fragmentColor, 0.`); // Interpolate between baseTexture and fragmentColor
        result += light.color * light.strength * max(0.0, dot(fragNormal, fragLight)) / (distance * distance) * baseTexture;
         result += light.color * light.strength * pow(max(0.0, dot(fragNormal, halfVec)),32) / (distance * distance) ;
    } else {
        // Use the material's ambient color as the base colour
        result += 0.75 * materialAmbient;
        result += light.color * light.strength * max(0.0, dot(fragNormal, fragLight)) / (distance * distance) * materialDiffuse;
        result += light.color * light.strength * max(0.0, dot(fragNormal, fragLight)) / (distance * distance) * materialSpecular;

    }

    return result;
}
